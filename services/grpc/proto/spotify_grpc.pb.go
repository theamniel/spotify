// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: services/grpc/proto/spotify.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Spotify_GetTrack_FullMethodName = "/proto.Spotify/GetTrack"
	Spotify_OnListen_FullMethodName = "/proto.Spotify/OnListen"
)

// SpotifyClient is the client API for Spotify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpotifyClient interface {
	GetTrack(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Track, error)
	OnListen(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Reponse], error)
}

type spotifyClient struct {
	cc grpc.ClientConnInterface
}

func NewSpotifyClient(cc grpc.ClientConnInterface) SpotifyClient {
	return &spotifyClient{cc}
}

func (c *spotifyClient) GetTrack(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Track, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Track)
	err := c.cc.Invoke(ctx, Spotify_GetTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spotifyClient) OnListen(ctx context.Context, in *Request, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Reponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Spotify_ServiceDesc.Streams[0], Spotify_OnListen_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Reponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Spotify_OnListenClient = grpc.ServerStreamingClient[Reponse]

// SpotifyServer is the server API for Spotify service.
// All implementations must embed UnimplementedSpotifyServer
// for forward compatibility.
type SpotifyServer interface {
	GetTrack(context.Context, *Request) (*Track, error)
	OnListen(*Request, grpc.ServerStreamingServer[Reponse]) error
	mustEmbedUnimplementedSpotifyServer()
}

// UnimplementedSpotifyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSpotifyServer struct{}

func (UnimplementedSpotifyServer) GetTrack(context.Context, *Request) (*Track, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrack not implemented")
}
func (UnimplementedSpotifyServer) OnListen(*Request, grpc.ServerStreamingServer[Reponse]) error {
	return status.Errorf(codes.Unimplemented, "method OnListen not implemented")
}
func (UnimplementedSpotifyServer) mustEmbedUnimplementedSpotifyServer() {}
func (UnimplementedSpotifyServer) testEmbeddedByValue()                 {}

// UnsafeSpotifyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpotifyServer will
// result in compilation errors.
type UnsafeSpotifyServer interface {
	mustEmbedUnimplementedSpotifyServer()
}

func RegisterSpotifyServer(s grpc.ServiceRegistrar, srv SpotifyServer) {
	// If the following call pancis, it indicates UnimplementedSpotifyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Spotify_ServiceDesc, srv)
}

func _Spotify_GetTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpotifyServer).GetTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Spotify_GetTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpotifyServer).GetTrack(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Spotify_OnListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpotifyServer).OnListen(m, &grpc.GenericServerStream[Request, Reponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Spotify_OnListenServer = grpc.ServerStreamingServer[Reponse]

// Spotify_ServiceDesc is the grpc.ServiceDesc for Spotify service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Spotify_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Spotify",
	HandlerType: (*SpotifyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTrack",
			Handler:    _Spotify_GetTrack_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OnListen",
			Handler:       _Spotify_OnListen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "services/grpc/proto/spotify.proto",
}
